// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void DebugSpawnSimpleEnergyOrbHandler(ReducerEventContext ctx, WorldCoords worldCoords, float frequency, uint quantumCount);
        public event DebugSpawnSimpleEnergyOrbHandler? OnDebugSpawnSimpleEnergyOrb;

        public void DebugSpawnSimpleEnergyOrb(WorldCoords worldCoords, float frequency, uint quantumCount)
        {
            conn.InternalCallReducer(new Reducer.DebugSpawnSimpleEnergyOrb(worldCoords, frequency, quantumCount), this.SetCallReducerFlags.DebugSpawnSimpleEnergyOrbFlags);
        }

        public bool InvokeDebugSpawnSimpleEnergyOrb(ReducerEventContext ctx, Reducer.DebugSpawnSimpleEnergyOrb args)
        {
            if (OnDebugSpawnSimpleEnergyOrb == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnDebugSpawnSimpleEnergyOrb(
                ctx,
                args.WorldCoords,
                args.Frequency,
                args.QuantumCount
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class DebugSpawnSimpleEnergyOrb : Reducer, IReducerArgs
        {
            [DataMember(Name = "world_coords")]
            public WorldCoords WorldCoords;
            [DataMember(Name = "frequency")]
            public float Frequency;
            [DataMember(Name = "quantum_count")]
            public uint QuantumCount;

            public DebugSpawnSimpleEnergyOrb(
                WorldCoords WorldCoords,
                float Frequency,
                uint QuantumCount
            )
            {
                this.WorldCoords = WorldCoords;
                this.Frequency = Frequency;
                this.QuantumCount = QuantumCount;
            }

            public DebugSpawnSimpleEnergyOrb()
            {
                this.WorldCoords = new();
            }

            string IReducerArgs.ReducerName => "debug_spawn_simple_energy_orb";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags DebugSpawnSimpleEnergyOrbFlags;
        public void DebugSpawnSimpleEnergyOrb(CallReducerFlags flags) => DebugSpawnSimpleEnergyOrbFlags = flags;
    }
}
