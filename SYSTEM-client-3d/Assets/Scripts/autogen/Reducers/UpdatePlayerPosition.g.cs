// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdatePlayerPositionHandler(ReducerEventContext ctx, WorldCoords worldCoords, DbVector3 position, DbQuaternion rotation);
        public event UpdatePlayerPositionHandler? OnUpdatePlayerPosition;

        public void UpdatePlayerPosition(WorldCoords worldCoords, DbVector3 position, DbQuaternion rotation)
        {
            conn.InternalCallReducer(new Reducer.UpdatePlayerPosition(worldCoords, position, rotation), this.SetCallReducerFlags.UpdatePlayerPositionFlags);
        }

        public bool InvokeUpdatePlayerPosition(ReducerEventContext ctx, Reducer.UpdatePlayerPosition args)
        {
            if (OnUpdatePlayerPosition == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnUpdatePlayerPosition(
                ctx,
                args.WorldCoords,
                args.Position,
                args.Rotation
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdatePlayerPosition : Reducer, IReducerArgs
        {
            [DataMember(Name = "world_coords")]
            public WorldCoords WorldCoords;
            [DataMember(Name = "position")]
            public DbVector3 Position;
            [DataMember(Name = "rotation")]
            public DbQuaternion Rotation;

            public UpdatePlayerPosition(
                WorldCoords WorldCoords,
                DbVector3 Position,
                DbQuaternion Rotation
            )
            {
                this.WorldCoords = WorldCoords;
                this.Position = Position;
                this.Rotation = Rotation;
            }

            public UpdatePlayerPosition()
            {
                this.WorldCoords = new();
                this.Position = new();
                this.Rotation = new();
            }

            string IReducerArgs.ReducerName => "update_player_position";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdatePlayerPositionFlags;
        public void UpdatePlayerPosition(CallReducerFlags flags) => UpdatePlayerPositionFlags = flags;
    }
}
