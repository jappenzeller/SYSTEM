// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdatePlayerPositionHandler(ReducerEventContext ctx, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float rotW);
        public event UpdatePlayerPositionHandler? OnUpdatePlayerPosition;

        public void UpdatePlayerPosition(float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float rotW)
        {
            conn.InternalCallReducer(new Reducer.UpdatePlayerPosition(posX, posY, posZ, rotX, rotY, rotZ, rotW), this.SetCallReducerFlags.UpdatePlayerPositionFlags);
        }

        public bool InvokeUpdatePlayerPosition(ReducerEventContext ctx, Reducer.UpdatePlayerPosition args)
        {
            if (OnUpdatePlayerPosition == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnUpdatePlayerPosition(
                ctx,
                args.PosX,
                args.PosY,
                args.PosZ,
                args.RotX,
                args.RotY,
                args.RotZ,
                args.RotW
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdatePlayerPosition : Reducer, IReducerArgs
        {
            [DataMember(Name = "pos_x")]
            public float PosX;
            [DataMember(Name = "pos_y")]
            public float PosY;
            [DataMember(Name = "pos_z")]
            public float PosZ;
            [DataMember(Name = "rot_x")]
            public float RotX;
            [DataMember(Name = "rot_y")]
            public float RotY;
            [DataMember(Name = "rot_z")]
            public float RotZ;
            [DataMember(Name = "rot_w")]
            public float RotW;

            public UpdatePlayerPosition(
                float PosX,
                float PosY,
                float PosZ,
                float RotX,
                float RotY,
                float RotZ,
                float RotW
            )
            {
                this.PosX = PosX;
                this.PosY = PosY;
                this.PosZ = PosZ;
                this.RotX = RotX;
                this.RotY = RotY;
                this.RotZ = RotZ;
                this.RotW = RotW;
            }

            public UpdatePlayerPosition()
            {
            }

            string IReducerArgs.ReducerName => "update_player_position";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdatePlayerPositionFlags;
        public void UpdatePlayerPosition(CallReducerFlags flags) => UpdatePlayerPositionFlags = flags;
    }
}
